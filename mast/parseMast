#!/usr/bin/python
'''
Read the tabular output of MAST, and check which hits are in the upstream region
of a gene based on a GenBank file
'''

__author__ = "Marco Galardini"

from Bio import SeqIO

################################################################################
# Read options

def getOptions():
    import argparse

    # create the top-level parser
    description = ("Parse the tabular output of MAST and a GenBank file, "+
                    "providing the list of hits found in gene upstream regions")
    parser = argparse.ArgumentParser(description = description)
    parser.add_argument('mast', action="store",
                            help='MAST tabular file')
    parser.add_argument('genome', action="store",
                            help='Genome GenBank file')
    parser.add_argument('regulator', action="store",
                            help='Regulator name')
    parser.add_argument('-u', '--upstream', action='store',
                        type=int,
                        default=400,
                        help='Upstream region size [Default: 400bp]')
    parser.add_argument('-d', '--downstream', action='store',
                        type=int,
                        default=100,
                        help='Upstream region size [Default: 100bp]')
    parser.add_argument('-t', '--threshold', action='store',
                        type=float,
                        default=0.0001,
                        help='p-value threshold [Default: 0.0001]')
    parser.add_argument('-o', '--order', action="store_true",
            default=False,
            dest='order',
            help='The motif has to found in forward with the gene (not for palindromic motifs)')
    parser.add_argument('-f', '--fasta', action="store_true",
            default=False,
            dest='fasta',
            help='Output in FASTA format')
    
    return parser.parse_args()

################################################################################
# Classes

class Mast(object):
    def __init__(self, dna, strand, mname, start, stop, score, pvalue):
        self.dna = dna
        self.strand = strand
        self.mname = mname
        self.start = int(start)
        self.stop = int(stop)
        self.score = float(score)
        self.pvalue = float(pvalue)

################################################################################
# Functions

def parseMast(fname, threshold=0.0001):
    '''
    Generator to relevant lines of a MAST output
    Returns Mast objects
    '''
    for l in open(fname):
        if l.lstrip().startswith('#'):continue
        
        dna, strandmname, start, stop, score, pvalue = l.strip().split()
        strand = strandmname[0]
        mname = strandmname[1:]
        
        if float(pvalue) > threshold:continue
        
        yield Mast(dna, strand, mname, start, stop, score, pvalue)

################################################################################
# Main

if __name__ == "__main__":
    options = getOptions()

    hits = {}
    for m in parseMast(options.mast, options.threshold):
        if m.dna not in hits:
            hits[m.dna] = set()
        hits[m.dna].add(m)
       
    i = 0
        
    for s in SeqIO.parse(open(options.genome), 'genbank'):
        if s.id not in hits:continue
        
        for m in hits[s.id]:
            for f in filter(lambda x: x.type == 'CDS', s.features):
                if f.strand == 1:
                    if (m.start > (f.location.start - options.upstream) and
                           m.stop < (f.location.start + options.downstream)):
                        if options.order and m.strand == '-':continue
                        
                        if m.strand == '-':
                            strand = '1'
                        else:
                            strand = '0'
                        
                        start = m.start - f.location.start
                        stop = m.stop - f.location.start
                        
                        if m.strand == '+':
                            seq = s[m.start  -1:m.stop ].seq
                        else:
                            seq = s[m.start  -1:m.stop ].seq.reverse_complement()
                        
                        if options.fasta:
                            print '>%d'%i
                            print seq
                            i += 1
                        else:
                            print '\t'.join([str(x) for x in [f.qualifiers['locus_tag'][0],
                                                  strand, start, stop,
                                                  seq, 'mast',
                                                  m.pvalue, options.threshold,
                                                  options.regulator]])
                else:
                    if (m.start > (f.location.end - options.downstream) and
                           m.stop < (f.location.end + options.upstream)):
                        if options.order and m.strand == '+':continue
                            
                        if m.strand == '+':
                            strand = '1'
                        else:
                            strand = '0'
                        
                        start = f.location.end - m.stop
                        stop = f.location.end - m.start
                        
                        if m.strand == '+':
                            seq = s[m.start  -1:m.stop ].seq
                        else:
                            seq = s[m.start  -1:m.stop ].seq.reverse_complement()
                        
                        if options.fasta:
                            print '>%d'%i
                            print seq
                            i += 1
                        else:
                            print '\t'.join([str(x) for x in [f.qualifiers['locus_tag'][0],
                                                  strand, start, stop,
                                                  seq, 'mast',
                                                  m.pvalue, options.threshold,
                                                  options.regulator]])
        
    
