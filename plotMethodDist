#!/usr/bin/python

import sys

if len(sys.argv) < 3:
    print 'USAGE: plotMethodDist REGULATOR INFILE [[INFILE] ...]'
    sys.exit(1)

reg = sys.argv[1]
infiles = sys.argv[2:]

logmethods = ['rsat', 'nhmmer', 'mast']

import math

meth = {}
pdist = set()

for f in infiles:
    for l in open(f):
        s = l.rstrip().split('\t')
        try:
            st = int(s[6])
            en = int(s[7])
        except:continue
        sc = float(s[10])
        me = s[9]
        
        meth[me] = meth.get(me, set())
        if me in logmethods:
            meth[me].add(((st+en)/2.0, math.log10(sc)))
        else:
            meth[me].add(((st+en)/2.0, sc))
        pdist.add((st+en)/2.0)
    
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
    
fig = plt.figure(figsize=(8,8))

#matplotlib.rcParams['axes.color_cycle'] = ['r', 'b', 'r', 'g', 'k']
#plt.rc('axes', color_cycle=['b', 'r', 'g', 'k'])

colors = ['b', 'r', 'g', 'k']

import numpy as np
nmeth = np.array(meth.keys())

# Array reshape (tricky!)
# 1- Finger crossed for a perfect square
square = np.sqrt( len(nmeth) )
if square.is_integer():
    # Yep
    rows = cols = int(square)
else:
    # Oh snap!
    cols = int(square)
    rows = len(nmeth) / float(cols)
    if not rows.is_integer():
        # Some fake signals will be added
        rows = int(rows) + 1
    rows = int(rows)

i = 0
for m in sorted(meth.keys()):
    ax = fig.add_subplot(rows, cols, i)
    
    j = i
    while True:
        if j > len(colors)-1:
            j = i-len(colors)
        else:
            c = colors[j]
            break
    
    if m in logmethods:
        ms = max([-x[1] for x in meth[m]])
        mins = min([-x[1] for x in meth[m]])
        try:
            ax.plot([x[0] for x in meth[m]], [(-x[1]-mins)/(ms-mins) for x in meth[m]], '+%s'%c)
        except:pass
    else:
        ms = max([x[1] for x in meth[m]])
        mins = min([x[1] for x in meth[m]])
        try:
            ax.plot([x[0] for x in meth[m]], [(x[1]-mins)/(ms-mins) for x in meth[m]], '+%s'%c)
        except:pass
    ax.set_title('%s'%m)
    ax.set_ylim(0, 1)
    ax.set_xlim(min(pdist),0)
    
    i += 1

plt.tight_layout()
plt.savefig('%s.png'%reg)
plt.savefig('%s.pdf'%reg)
