#!/usr/bin/python

import sys
import networkx as nx
from scipy.spatial.distance import jaccard

if len(sys.argv) < 2:
    print 'USAGE: ./regDist GML_FILE'
    sys.exit(1)

infile = sys.argv[1]
n = nx.read_gml(infile)

# Grep the orgs in the net
orgs = set()
for x in n:
    for o in n.node[x]['orgs'].split():
        orgs.add(o)
        
# Distance matrix for the regulators presence
d = {}
r = set()
for x in filter(lambda x: n.node[x]['kind'] == 'regulator', n):
    orgz = set(n.node[x]['orgs'].split())
    for o in orgs:
        d[o] = d.get(o, [])
        if o in orgz:
            d[o].append(1)
        else:
            d[o].append(0)
    r.add(x)

# Distance matrix for the regulatory links
for a, b in filter(lambda x: n[x[0]][x[1]]['kind'] == 'regulated', n.edges()):
    # Check if this is a plug & play gene
    regulator = len(n.node[a]['orgs'].split())
    ro = set(n.node[a]['orgs'].split())
    
    edge = len(n[a][b]['orgs'].split())
    eo = set(n[a][b]['orgs'].split())
    
    regulated = len(n.node[b]['orgs'].split())
    reo = set(n.node[b]['orgs'].split())
    
    if eo != reo and eo.issuperset(reo) and reo.issubset(eo):
        raise ValueError('Found a regulator edge with more orgs than the regulated gene (%s --> %s)'%(a, b))
    elif edge == regulated and eo == reo:
        # Plug & play gene
        continue

    orgz = set(n[a][b]['orgs'].split())
    for o in orgs:
        d[o] = d.get(o, [])
        if o in orgz:
            d[o].append(1)
        else:
            d[o].append(0)
    r.add( '%s-%s'%(a,b) )
    
# Print the distance matrix
print '\t'.join( [''] + sorted(orgs) )
for o in sorted(orgs):
    print '\t'.join( [str(o)] + [str(jaccard(d[o], d[x])) for x in sorted(orgs)] )
